{"count": 29693, "next": "http://ports.macports.org/api/v1/ports/?format=json&page=242", "previous": "http://ports.macports.org/api/v1/ports/?format=json&page=240", "results": [{"name": "present", "portdir": "python/present", "version": "0.6.0", "license": "Apache-2", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/vinayak-mehta/present", "description": "A terminal-based presentation tool with colors and effects", "long_description": "A terminal-based presentation tool with colors and effects.", "active": true, "categories": ["office", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["py38-mistune-devel", "py38-asciimatics", "py38-yaml", "py38-pyfiglet", "py38-click"]}], "depends_on": []}, {"name": "ptpython", "portdir": "python/ptpython", "version": "3.0.5", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/prompt-toolkit/ptpython", "description": "Python REPL built on top of prompt_toolkit", "long_description": "Python REPL built on top of prompt_toolkit", "active": true, "categories": ["python"], "maintainers": [], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["py38-jedi", "python38", "py38-pygments", "py38-prompt_toolkit", "py38-appdirs"]}], "depends_on": []}, {"name": "py-BitArray2D", "portdir": "python/py-BitArray2D", "version": "2.1", "license": "PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://engineering.purdue.edu/kak/dist2d/BitArray2D-2.1.html", "description": "A memory-efficient packed representation for 2D bit arrays", "long_description": "The BitArray2D class is for a memory-efficient packed representation of 2D bit arrays and for logical and other operations (such as blob dilations, erosions, etc.) on such arrays. The implementation of the class takes advantage of the facilities of the BitVector class for the memory representation and for the allowed operations.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py37-BitArray2D"]}], "depends_on": []}, {"name": "py27-BitArray2D", "portdir": "python/py-BitArray2D", "version": "2.1", "license": "PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://engineering.purdue.edu/kak/dist2d/BitArray2D-2.1.html", "description": "A memory-efficient packed representation for 2D bit arrays", "long_description": "The BitArray2D class is for a memory-efficient packed representation of 2D bit arrays and for logical and other operations (such as blob dilations, erosions, etc.) on such arrays. The implementation of the class takes advantage of the facilities of the BitVector class for the memory representation and for the allowed operations.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["python27", "py27-BitVector"]}], "depends_on": []}, {"name": "py35-BitArray2D", "portdir": "python/py-BitArray2D", "version": "2.1", "license": "PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://engineering.purdue.edu/kak/dist2d/BitArray2D-2.1.html", "description": "A memory-efficient packed representation for 2D bit arrays", "long_description": "The BitArray2D class is for a memory-efficient packed representation of 2D bit arrays and for logical and other operations (such as blob dilations, erosions, etc.) on such arrays. The implementation of the class takes advantage of the facilities of the BitVector class for the memory representation and for the allowed operations.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py35-setuptools"]}, {"type": "lib", "ports": ["python35", "py35-BitVector"]}], "depends_on": []}, {"name": "py36-BitArray2D", "portdir": "python/py-BitArray2D", "version": "2.1", "license": "PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://engineering.purdue.edu/kak/dist2d/BitArray2D-2.1.html", "description": "A memory-efficient packed representation for 2D bit arrays", "long_description": "The BitArray2D class is for a memory-efficient packed representation of 2D bit arrays and for logical and other operations (such as blob dilations, erosions, etc.) on such arrays. The implementation of the class takes advantage of the facilities of the BitVector class for the memory representation and for the allowed operations.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools"]}, {"type": "lib", "ports": ["python36", "py36-BitVector"]}], "depends_on": []}, {"name": "py37-BitArray2D", "portdir": "python/py-BitArray2D", "version": "2.1", "license": "PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://engineering.purdue.edu/kak/dist2d/BitArray2D-2.1.html", "description": "A memory-efficient packed representation for 2D bit arrays", "long_description": "The BitArray2D class is for a memory-efficient packed representation of 2D bit arrays and for logical and other operations (such as blob dilations, erosions, etc.) on such arrays. The implementation of the class takes advantage of the facilities of the BitVector class for the memory representation and for the allowed operations.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["python37", "py37-BitVector"]}], "depends_on": [{"type": "lib", "ports": ["py-BitArray2D"]}]}, {"name": "py-BitVector", "portdir": "python/py-BitVector", "version": "3.4.9", "license": "PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://engineering.purdue.edu/kak/dist/BitVector-3.4.9.html", "description": "A memory-efficient packed representation for bit arrays", "long_description": "The BitVector class is for a memory-efficient packed representation of bit arrays and for logical operations on such arrays. It is written in pure Python.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py37-BitVector"]}], "depends_on": []}, {"name": "py27-BitVector", "portdir": "python/py-BitVector", "version": "3.4.9", "license": "PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://engineering.purdue.edu/kak/dist/BitVector-3.4.9.html", "description": "A memory-efficient packed representation for bit arrays", "long_description": "The BitVector class is for a memory-efficient packed representation of bit arrays and for logical operations on such arrays. It is written in pure Python.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["python27"]}], "depends_on": [{"type": "lib", "ports": ["py27-BitArray2D"]}]}, {"name": "py35-aenum", "portdir": "python/py-aenum", "version": "3.1.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/ethanfurman/aenum", "description": "Advanced Enumerations (compatible with Python's stdlib Enum), NamedTuples, and NamedConstants.", "long_description": "Advanced Enumerations (compatible with Python's stdlib Enum), NamedTuples, and NamedConstants.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py35-setuptools"]}, {"type": "lib", "ports": ["python35"]}], "depends_on": []}, {"name": "py35-BitVector", "portdir": "python/py-BitVector", "version": "3.4.9", "license": "PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://engineering.purdue.edu/kak/dist/BitVector-3.4.9.html", "description": "A memory-efficient packed representation for bit arrays", "long_description": "The BitVector class is for a memory-efficient packed representation of bit arrays and for logical operations on such arrays. It is written in pure Python.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py35-setuptools"]}, {"type": "lib", "ports": ["python35"]}], "depends_on": [{"type": "lib", "ports": ["py35-BitArray2D"]}]}, {"name": "py36-BitVector", "portdir": "python/py-BitVector", "version": "3.4.9", "license": "PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://engineering.purdue.edu/kak/dist/BitVector-3.4.9.html", "description": "A memory-efficient packed representation for bit arrays", "long_description": "The BitVector class is for a memory-efficient packed representation of bit arrays and for logical operations on such arrays. It is written in pure Python.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools"]}, {"type": "lib", "ports": ["python36"]}], "depends_on": [{"type": "lib", "ports": ["py36-BitArray2D"]}]}, {"name": "py37-BitVector", "portdir": "python/py-BitVector", "version": "3.4.9", "license": "PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://engineering.purdue.edu/kak/dist/BitVector-3.4.9.html", "description": "A memory-efficient packed representation for bit arrays", "long_description": "The BitVector class is for a memory-efficient packed representation of bit arrays and for logical operations on such arrays. It is written in pure Python.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["python37"]}], "depends_on": [{"type": "lib", "ports": ["py37-BitArray2D", "py-BitVector"]}]}, {"name": "py-DAWG", "portdir": "python/py-DAWG", "version": "0.8.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pytries/DAWG/", "description": "Fast and memory efficient DAWG for Python.", "long_description": "Fast and memory efficient DAWG for Python.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py38-DAWG"]}], "depends_on": []}, {"name": "py27-DAWG", "portdir": "python/py-DAWG", "version": "0.8.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pytries/DAWG/", "description": "Fast and memory efficient DAWG for Python.", "long_description": "Fast and memory efficient DAWG for Python.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["python27"]}], "depends_on": []}, {"name": "py35-DAWG", "portdir": "python/py-DAWG", "version": "0.8.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pytries/DAWG/", "description": "Fast and memory efficient DAWG for Python.", "long_description": "Fast and memory efficient DAWG for Python.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py35-setuptools"]}, {"type": "lib", "ports": ["python35"]}], "depends_on": []}, {"name": "py36-DAWG", "portdir": "python/py-DAWG", "version": "0.8.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pytries/DAWG/", "description": "Fast and memory efficient DAWG for Python.", "long_description": "Fast and memory efficient DAWG for Python.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools"]}, {"type": "lib", "ports": ["python36"]}], "depends_on": []}, {"name": "py37-DAWG", "portdir": "python/py-DAWG", "version": "0.8.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pytries/DAWG/", "description": "Fast and memory efficient DAWG for Python.", "long_description": "Fast and memory efficient DAWG for Python.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["python37"]}], "depends_on": []}, {"name": "py38-DAWG", "portdir": "python/py-DAWG", "version": "0.8.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pytries/DAWG/", "description": "Fast and memory efficient DAWG for Python.", "long_description": "Fast and memory efficient DAWG for Python.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["python38"]}], "depends_on": [{"type": "lib", "ports": ["py-DAWG"]}]}, {"name": "py-FlexGet", "portdir": "python/py-FlexGet", "version": "1.2.183", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://flexget.com/", "description": "FlexGet is a multipurpose automation tool for content like torrents, nzbs, podcasts, comics, etc.", "long_description": "FlexGet is able to handle different kinds of sources like RSS-feeds, html pages and even csv files. There are even some plugins for sites that do not provide any kind of useful feeds.", "active": true, "categories": ["www", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py27-FlexGet"]}], "depends_on": []}, {"name": "py27-FlexGet", "portdir": "python/py-FlexGet", "version": "1.2.183", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://flexget.com/", "description": "FlexGet is a multipurpose automation tool for content like torrents, nzbs, podcasts, comics, etc.", "long_description": "FlexGet is able to handle different kinds of sources like RSS-feeds, html pages and even csv files. There are even some plugins for sites that do not provide any kind of useful feeds.", "active": true, "categories": ["www", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-paver"]}, {"type": "lib", "ports": ["python27"]}, {"type": "run", "ports": ["py27-feedparser", "py27-html5lib", "py27-progressbar", "py27-pygooglechart", "py27-pynzb", "py27-sqlalchemy", "py27-yaml", "py27-beautifulsoup", "py27-PyRSS2Gen"]}], "depends_on": [{"type": "lib", "ports": ["py-FlexGet"]}]}, {"name": "py-GridDataFormats", "portdir": "python/py-GridDataFormats", "version": "0.5.0", "license": "LGPL-3", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/MDAnalysis/GridDataFormats", "description": "GridDataFormats provides the Python package 'gridData'.", "long_description": "GridDataFormats provides the Python package 'gridData'. It contains a class ('Grid') to handle data on a regular grid --- basically NumPy n-dimensional arrays. It supports reading from and writing to some common formats (such as OpenDX).", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py38-GridDataFormats"]}], "depends_on": []}, {"name": "py27-GridDataFormats", "portdir": "python/py-GridDataFormats", "version": "0.5.0", "license": "LGPL-3", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/MDAnalysis/GridDataFormats", "description": "GridDataFormats provides the Python package 'gridData'.", "long_description": "GridDataFormats provides the Python package 'gridData'. It contains a class ('Grid') to handle data on a regular grid --- basically NumPy n-dimensional arrays. It supports reading from and writing to some common formats (such as OpenDX).", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["py27-scipy", "python27", "py27-six", "py27-numpy"]}, {"type": "test", "ports": ["py27-pytest"]}], "depends_on": [{"type": "lib", "ports": ["py27-MDAnalysis"]}]}, {"name": "py36-GridDataFormats", "portdir": "python/py-GridDataFormats", "version": "0.5.0", "license": "LGPL-3", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/MDAnalysis/GridDataFormats", "description": "GridDataFormats provides the Python package 'gridData'.", "long_description": "GridDataFormats provides the Python package 'gridData'. It contains a class ('Grid') to handle data on a regular grid --- basically NumPy n-dimensional arrays. It supports reading from and writing to some common formats (such as OpenDX).", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools"]}, {"type": "lib", "ports": ["py36-scipy", "python36", "py36-six", "py36-numpy"]}, {"type": "test", "ports": ["py36-pytest"]}], "depends_on": [{"type": "lib", "ports": ["py36-MDAnalysis"]}]}, {"name": "py37-GridDataFormats", "portdir": "python/py-GridDataFormats", "version": "0.5.0", "license": "LGPL-3", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/MDAnalysis/GridDataFormats", "description": "GridDataFormats provides the Python package 'gridData'.", "long_description": "GridDataFormats provides the Python package 'gridData'. It contains a class ('Grid') to handle data on a regular grid --- basically NumPy n-dimensional arrays. It supports reading from and writing to some common formats (such as OpenDX).", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["py37-scipy", "python37", "py37-six", "py37-numpy"]}, {"type": "test", "ports": ["py37-pytest"]}], "depends_on": [{"type": "lib", "ports": ["py37-MDAnalysis"]}]}, {"name": "py38-GridDataFormats", "portdir": "python/py-GridDataFormats", "version": "0.5.0", "license": "LGPL-3", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/MDAnalysis/GridDataFormats", "description": "GridDataFormats provides the Python package 'gridData'.", "long_description": "GridDataFormats provides the Python package 'gridData'. It contains a class ('Grid') to handle data on a regular grid --- basically NumPy n-dimensional arrays. It supports reading from and writing to some common formats (such as OpenDX).", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["py38-scipy", "python38", "py38-six", "py38-numpy"]}, {"type": "test", "ports": ["py38-pytest"]}], "depends_on": [{"type": "lib", "ports": ["py-GridDataFormats", "py38-MDAnalysis"]}]}, {"name": "py-LabJackPython", "portdir": "python/py-LabJackPython", "version": "2.0.0", "license": "MIT and X11", "platforms": "darwin", "epoch": 3, "replaced_by": null, "homepage": "https://github.com/labjack/LabJackPython", "description": "The LabJack Python modules for the LabJack U3, U6, UE9 and U12.", "long_description": "The LabJack Python modules for the LabJack U3, U6, UE9 and U12.", "active": true, "categories": ["python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py37-LabJackPython"]}], "depends_on": []}, {"name": "py27-LabJackPython", "portdir": "python/py-LabJackPython", "version": "2.0.0", "license": "MIT and X11", "platforms": "darwin", "epoch": 3, "replaced_by": null, "homepage": "https://github.com/labjack/LabJackPython", "description": "The LabJack Python modules for the LabJack U3, U6, UE9 and U12.", "long_description": "The LabJack Python modules for the LabJack U3, U6, UE9 and U12.", "active": true, "categories": ["python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["python27", "exodriver"]}], "depends_on": []}, {"name": "py37-LabJackPython", "portdir": "python/py-LabJackPython", "version": "2.0.0", "license": "MIT and X11", "platforms": "darwin", "epoch": 3, "replaced_by": null, "homepage": "https://github.com/labjack/LabJackPython", "description": "The LabJack Python modules for the LabJack U3, U6, UE9 and U12.", "long_description": "The LabJack Python modules for the LabJack U3, U6, UE9 and U12.", "active": true, "categories": ["python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["python37", "exodriver"]}], "depends_on": [{"type": "lib", "ports": ["py-LabJackPython"]}]}, {"name": "py-MDAnalysis", "portdir": "python/py-MDAnalysis", "version": "1.0.0", "license": "GPL-2+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://www.mdanalysis.org/", "description": "An object-oriented toolkit to analyze molecular dynamics trajectories generated by CHARMM, Gromacs, NAMD, LAMMPS, or Amber.", "long_description": "An object-oriented toolkit to analyze molecular dynamics trajectories generated by CHARMM, Gromacs, NAMD, LAMMPS, or Amber. It also reads other formats (e.g. PDB files and XYZ format trajectories. It can write most of the coordinate formats, too, together with atom selections for use in Gromacs, CHARMM, VMD and PyMOL.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py38-MDAnalysis"]}], "depends_on": []}, {"name": "py27-MDAnalysis", "portdir": "python/py-MDAnalysis", "version": "1.0.0", "license": "GPL-2+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://www.mdanalysis.org/", "description": "An object-oriented toolkit to analyze molecular dynamics trajectories generated by CHARMM, Gromacs, NAMD, LAMMPS, or Amber.", "long_description": "An object-oriented toolkit to analyze molecular dynamics trajectories generated by CHARMM, Gromacs, NAMD, LAMMPS, or Amber. It also reads other formats (e.g. PDB files and XYZ format trajectories. It can write most of the coordinate formats, too, together with atom selections for use in Gromacs, CHARMM, VMD and PyMOL.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["py27-biopython", "py27-gsd", "py27-joblib", "py27-matplotlib", "py27-mmtf-python", "python27", "py27-networkx", "py27-numpy", "py27-scipy", "py27-six", "py27-tqdm", "py27-mock", "py27-GridDataFormats"]}], "depends_on": []}, {"name": "py36-MDAnalysis", "portdir": "python/py-MDAnalysis", "version": "1.0.0", "license": "GPL-2+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://www.mdanalysis.org/", "description": "An object-oriented toolkit to analyze molecular dynamics trajectories generated by CHARMM, Gromacs, NAMD, LAMMPS, or Amber.", "long_description": "An object-oriented toolkit to analyze molecular dynamics trajectories generated by CHARMM, Gromacs, NAMD, LAMMPS, or Amber. It also reads other formats (e.g. PDB files and XYZ format trajectories. It can write most of the coordinate formats, too, together with atom selections for use in Gromacs, CHARMM, VMD and PyMOL.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools"]}, {"type": "lib", "ports": ["py36-biopython", "py36-gsd", "py36-joblib", "py36-matplotlib", "py36-mmtf-python", "python36", "py36-networkx", "py36-numpy", "py36-scipy", "py36-six", "py36-tqdm", "py36-mock", "py36-GridDataFormats"]}], "depends_on": []}, {"name": "py37-MDAnalysis", "portdir": "python/py-MDAnalysis", "version": "1.0.0", "license": "GPL-2+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://www.mdanalysis.org/", "description": "An object-oriented toolkit to analyze molecular dynamics trajectories generated by CHARMM, Gromacs, NAMD, LAMMPS, or Amber.", "long_description": "An object-oriented toolkit to analyze molecular dynamics trajectories generated by CHARMM, Gromacs, NAMD, LAMMPS, or Amber. It also reads other formats (e.g. PDB files and XYZ format trajectories. It can write most of the coordinate formats, too, together with atom selections for use in Gromacs, CHARMM, VMD and PyMOL.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["py37-biopython", "py37-gsd", "py37-joblib", "py37-matplotlib", "py37-mmtf-python", "python37", "py37-networkx", "py37-numpy", "py37-scipy", "py37-six", "py37-tqdm", "py37-mock", "py37-GridDataFormats"]}], "depends_on": []}, {"name": "py38-MDAnalysis", "portdir": "python/py-MDAnalysis", "version": "1.0.0", "license": "GPL-2+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://www.mdanalysis.org/", "description": "An object-oriented toolkit to analyze molecular dynamics trajectories generated by CHARMM, Gromacs, NAMD, LAMMPS, or Amber.", "long_description": "An object-oriented toolkit to analyze molecular dynamics trajectories generated by CHARMM, Gromacs, NAMD, LAMMPS, or Amber. It also reads other formats (e.g. PDB files and XYZ format trajectories. It can write most of the coordinate formats, too, together with atom selections for use in Gromacs, CHARMM, VMD and PyMOL.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["py38-biopython", "py38-gsd", "py38-joblib", "py38-matplotlib", "py38-mmtf-python", "python38", "py38-networkx", "py38-numpy", "py38-scipy", "py38-six", "py38-tqdm", "py38-mock", "py38-GridDataFormats"]}], "depends_on": [{"type": "lib", "ports": ["py-MDAnalysis"]}]}, {"name": "py37-spyder-kernels", "portdir": "python/py-spyder-kernels", "version": "2.1.3", "license": "MIT", "platforms": "darwin", "epoch": 1, "replaced_by": null, "homepage": "https://github.com/spyder-ide/spyder-kernels", "description": "Jupyter kernels for Spyder's console.", "long_description": "Jupyter kernels for Spyder's console.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "reneeotten", "github": "reneeotten", "ports_count": 693}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["py37-ipykernel", "py37-ipython", "python37", "py37-wurlitzer", "py37-zmq", "py37-jupyter_client", "py37-cloudpickle"]}], "depends_on": [{"type": "run", "ports": ["py37-spyder-devel", "py37-spyder"]}]}, {"name": "py37-docstyle", "portdir": "python/py-docstyle", "version": "6.1.1", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/PyCQA/pydocstyle", "description": "Python docstring style checker", "long_description": "pydocstyle is a static analysis tool for checking compliance with Python docstring conventions.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "reneeotten", "github": "reneeotten", "ports_count": 693}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["python37", "py37-setuptools", "py37-snowballstemmer"]}, {"type": "run", "ports": ["pydocstyle_select"]}], "depends_on": [{"type": "lib", "ports": ["py37-python-lsp-server", "py37-language-server"]}]}, {"name": "py38-spyder-kernels", "portdir": "python/py-spyder-kernels", "version": "2.1.3", "license": "MIT", "platforms": "darwin", "epoch": 1, "replaced_by": null, "homepage": "https://github.com/spyder-ide/spyder-kernels", "description": "Jupyter kernels for Spyder's console.", "long_description": "Jupyter kernels for Spyder's console.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "reneeotten", "github": "reneeotten", "ports_count": 693}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["py38-ipykernel", "py38-ipython", "python38", "py38-wurlitzer", "py38-zmq", "py38-jupyter_client", "py38-cloudpickle"]}], "depends_on": [{"type": "run", "ports": ["py38-spyder-devel", "py38-spyder"]}]}, {"name": "py-PyRSS2Gen", "portdir": "python/py-PyRSS2Gen", "version": "1.1", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://www.dalkescientific.com/Python/PyRSS2Gen.html", "description": "A Python library for generating RSS 2.0 feeds", "long_description": "A Python library for generating RSS 2.0 feeds", "active": true, "categories": ["devel", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py36-PyRSS2Gen"]}], "depends_on": []}, {"name": "py27-PyRSS2Gen", "portdir": "python/py-PyRSS2Gen", "version": "1.1", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://www.dalkescientific.com/Python/PyRSS2Gen.html", "description": "A Python library for generating RSS 2.0 feeds", "long_description": "A Python library for generating RSS 2.0 feeds", "active": true, "categories": ["devel", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["python27"]}], "depends_on": [{"type": "run", "ports": ["py27-FlexGet"]}]}, {"name": "py35-PyRSS2Gen", "portdir": "python/py-PyRSS2Gen", "version": "1.1", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://www.dalkescientific.com/Python/PyRSS2Gen.html", "description": "A Python library for generating RSS 2.0 feeds", "long_description": "A Python library for generating RSS 2.0 feeds", "active": true, "categories": ["devel", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["python35"]}], "depends_on": []}, {"name": "py36-PyRSS2Gen", "portdir": "python/py-PyRSS2Gen", "version": "1.1", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://www.dalkescientific.com/Python/PyRSS2Gen.html", "description": "A Python library for generating RSS 2.0 feeds", "long_description": "A Python library for generating RSS 2.0 feeds", "active": true, "categories": ["devel", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["python36"]}], "depends_on": [{"type": "lib", "ports": ["py-PyRSS2Gen"]}]}, {"name": "zint", "portdir": "textproc/zint", "version": "2.10.0", "license": "GPL-3", "platforms": "darwin macosx", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/woo-j/zint", "description": "A barcode encoding library", "long_description": "zint is a barcode encoding library supporting over 50 symbologies including Code 128, Data Matrix, USPS OneCode, EAN-128, UPC/EAN, ITF, QR Code, Code 16k, PDF417, MicroPDF417, LOGMARS, Maxicode, GS1 DataBar, Aztec, Composite Symbols and more.", "active": true, "categories": ["textproc"], "maintainers": [{"name": "ra1nb0w", "github": "ra1nb0w", "ports_count": 126}], "variants": ["debug"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "cmake", "pkgconfig", "makeicns"]}, {"type": "lib", "ports": ["qt5-qtbase", "qt5-qttools", "zlib", "libpng"]}], "depends_on": []}, {"name": "py-abjad", "portdir": "python/py-abjad", "version": "1.1.1", "license": "GPL-3", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://www.projectabjad.org", "description": "Python wrapper for Lilypond", "long_description": "Abjad helps composers build up complex pieces of music notation in an iterative and incremental way. Use Abjad to create a symbolic representation of all the notes, rests, staves, tuplets, beams and slurs in any score. Because Abjad wraps the powerful LilyPond music notation package, you can use Abjad to control extremely fine-grained typographic details of all elements of any score.", "active": true, "categories": ["textproc", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py27-abjad"]}], "depends_on": []}, {"name": "py-actdiag", "portdir": "python/py-actdiag", "version": "2.0.0", "license": "Apache-2", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://blockdiag.com/", "description": "actdiag generates activity-diagram image from text", "long_description": "actdiag generates activity-diagram image from text", "active": true, "categories": ["graphics", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py38-actdiag"]}], "depends_on": []}, {"name": "py38-XlsxWriter", "portdir": "python/py-XlsxWriter", "version": "3.0.2", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/jmcnamara/XlsxWriter", "description": "Python module for writing files in XLSX file format.", "long_description": "XlsxWriter can be used to write text, numbers, formulas and hyperlinks to multiple worksheets and it supports features such as formatting and many more.", "active": true, "categories": ["python"], "maintainers": [{"name": "eborisch", "github": "eborisch", "ports_count": 165}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["python38"]}], "depends_on": [{"type": "lib", "ports": ["py38-pptx"]}]}, {"name": "py39-spyder-kernels", "portdir": "python/py-spyder-kernels", "version": "2.1.3", "license": "MIT", "platforms": "darwin", "epoch": 1, "replaced_by": null, "homepage": "https://github.com/spyder-ide/spyder-kernels", "description": "Jupyter kernels for Spyder's console.", "long_description": "Jupyter kernels for Spyder's console.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "reneeotten", "github": "reneeotten", "ports_count": 693}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py39-setuptools"]}, {"type": "lib", "ports": ["py39-ipykernel", "py39-ipython", "python39", "py39-wurlitzer", "py39-zmq", "py39-jupyter_client", "py39-cloudpickle"]}], "depends_on": [{"type": "lib", "ports": ["py-spyder-kernels"]}, {"type": "run", "ports": ["py39-spyder-devel", "py39-spyder"]}]}, {"name": "py38-docstyle", "portdir": "python/py-docstyle", "version": "6.1.1", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/PyCQA/pydocstyle", "description": "Python docstring style checker", "long_description": "pydocstyle is a static analysis tool for checking compliance with Python docstring conventions.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "reneeotten", "github": "reneeotten", "ports_count": 693}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["python38", "py38-setuptools", "py38-snowballstemmer"]}, {"type": "run", "ports": ["pydocstyle_select"]}], "depends_on": [{"type": "lib", "ports": ["py38-python-lsp-server", "py38-language-server"]}]}, {"name": "py27-abjad", "portdir": "python/py-abjad", "version": "1.1.1", "license": "GPL-3", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://www.projectabjad.org", "description": "Python wrapper for Lilypond", "long_description": "Abjad helps composers build up complex pieces of music notation in an iterative and incremental way. Use Abjad to create a symbolic representation of all the notes, rests, staves, tuplets, beams and slurs in any score. Because Abjad wraps the powerful LilyPond music notation package, you can use Abjad to control extremely fine-grained typographic details of all elements of any score.", "active": true, "categories": ["textproc", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["python27"]}], "depends_on": [{"type": "lib", "ports": ["py-abjad"]}]}, {"name": "py-absl", "portdir": "python/py-absl", "version": "0.15.0", "license": "Apache-2", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/abseil/abseil-py", "description": "Abseil Python Common Libraries", "long_description": "absl-py is a collection of Python library code for building Python applications. The code is collected from Google's own Python code base, and has been extensively tested and used in production.", "active": true, "categories": ["python"], "maintainers": [{"name": "emcrisostomo", "github": "emcrisostomo", "ports_count": 112}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py39-absl"]}], "depends_on": []}, {"name": "py-acor", "portdir": "python/py-acor", "version": "1.1.1", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/dfm/acor", "description": "estimate the autocorrelation time of time-series data quickly", "long_description": "This is a direct port of a C++ routine by Jonathan Goodman (NYU) called ACOR that estimates the autocorrelation time of time series data very quickly.", "active": true, "categories": ["science", "math", "python"], "maintainers": [{"name": "aronnax", "github": "lpsinger", "ports_count": 371}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py36-acor"]}], "depends_on": []}]}