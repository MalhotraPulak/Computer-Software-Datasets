{"count": 29693, "next": "http://ports.macports.org/api/v1/ports/?format=json&page=308", "previous": "http://ports.macports.org/api/v1/ports/?format=json&page=306", "results": [{"name": "py-outcome", "portdir": "python/py-outcome", "version": "1.1.0", "license": "(Apache-2 or MIT)", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python-trio/outcome", "description": "Capture the outcome of Python function calls", "long_description": "Capture the outcome of Python function calls. Extracted from the Trio project.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "jan", "github": "jandemter", "ports_count": 39}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py39-outcome"]}], "depends_on": []}, {"name": "py36-outcome", "portdir": "python/py-outcome", "version": "1.1.0", "license": "(Apache-2 or MIT)", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python-trio/outcome", "description": "Capture the outcome of Python function calls", "long_description": "Capture the outcome of Python function calls. Extracted from the Trio project.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "jan", "github": "jandemter", "ports_count": 39}], "variants": [], "dependencies": [{"type": "build", "ports": ["py36-setuptools", "clang-9.0"]}, {"type": "lib", "ports": ["python36"]}, {"type": "run", "ports": ["py36-attrs"]}, {"type": "test", "ports": ["py36-pytest-asyncio", "py36-async_generator", "py36-pytest"]}], "depends_on": [{"type": "run", "ports": ["py36-trio"]}]}, {"name": "py37-outcome", "portdir": "python/py-outcome", "version": "1.1.0", "license": "(Apache-2 or MIT)", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python-trio/outcome", "description": "Capture the outcome of Python function calls", "long_description": "Capture the outcome of Python function calls. Extracted from the Trio project.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "jan", "github": "jandemter", "ports_count": 39}], "variants": [], "dependencies": [{"type": "build", "ports": ["py37-setuptools", "clang-9.0"]}, {"type": "lib", "ports": ["python37"]}, {"type": "run", "ports": ["py37-attrs"]}, {"type": "test", "ports": ["py37-pytest-asyncio", "py37-async_generator", "py37-pytest"]}], "depends_on": [{"type": "run", "ports": ["py37-trio"]}]}, {"name": "py38-outcome", "portdir": "python/py-outcome", "version": "1.1.0", "license": "(Apache-2 or MIT)", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python-trio/outcome", "description": "Capture the outcome of Python function calls", "long_description": "Capture the outcome of Python function calls. Extracted from the Trio project.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "jan", "github": "jandemter", "ports_count": 39}], "variants": [], "dependencies": [{"type": "build", "ports": ["py38-setuptools", "clang-9.0"]}, {"type": "lib", "ports": ["python38"]}, {"type": "run", "ports": ["py38-attrs"]}, {"type": "test", "ports": ["py38-pytest-asyncio", "py38-async_generator", "py38-pytest"]}], "depends_on": [{"type": "run", "ports": ["py38-trio"]}]}, {"name": "py39-overrides", "portdir": "python/py-overrides", "version": "3.1.0", "license": "Apache-2", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/mkorpela/overrides", "description": "A decorator to automatically detect mismatch when overriding a method", "long_description": "A decorator to automatically detect mismatch when overriding a method. See http://stackoverflow.com/questions/1167617/in-python-how-do-i-indicate-im-overriding-a-method", "active": true, "categories": ["textproc", "python"], "maintainers": [], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py39-setuptools"]}, {"type": "lib", "ports": ["python39"]}, {"type": "test", "ports": ["py39-nose"]}], "depends_on": [{"type": "lib", "ports": ["py-overrides"]}, {"type": "run", "ports": ["py39-allennlp"]}]}, {"name": "py-owslib", "portdir": "python/py-owslib", "version": "0.19.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://geopython.github.io/OWSLib/", "description": "OGC Web Service utility library", "long_description": "OWSLib is a Python package for client programming with Open Geospatial Consortium (OGC) web service (hence OWS) interface standards, and their related content models. OWSLib provides a common API for accessing service metadata and wrappers for numerous OGC Web Service interfaces.", "active": true, "categories": ["net", "science", "python", "gis"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py39-owslib"]}], "depends_on": []}, {"name": "py27-owslib", "portdir": "python/py-owslib", "version": "0.19.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://geopython.github.io/OWSLib/", "description": "OGC Web Service utility library", "long_description": "OWSLib is a Python package for client programming with Open Geospatial Consortium (OGC) web service (hence OWS) interface standards, and their related content models. OWSLib provides a common API for accessing service metadata and wrappers for numerous OGC Web Service interfaces.", "active": true, "categories": ["net", "science", "python", "gis"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["py27-pyproj", "python27", "py27-tz", "py27-requests", "py27-dateutil"]}], "depends_on": [{"type": "lib", "ports": ["py27-cartopy"]}]}, {"name": "py35-owslib", "portdir": "python/py-owslib", "version": "0.19.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://geopython.github.io/OWSLib/", "description": "OGC Web Service utility library", "long_description": "OWSLib is a Python package for client programming with Open Geospatial Consortium (OGC) web service (hence OWS) interface standards, and their related content models. OWSLib provides a common API for accessing service metadata and wrappers for numerous OGC Web Service interfaces.", "active": true, "categories": ["net", "science", "python", "gis"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py35-setuptools"]}, {"type": "lib", "ports": ["py35-pyproj", "python35", "py35-tz", "py35-requests", "py35-dateutil"]}], "depends_on": [{"type": "lib", "ports": ["py35-cartopy"]}]}, {"name": "py36-owslib", "portdir": "python/py-owslib", "version": "0.19.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://geopython.github.io/OWSLib/", "description": "OGC Web Service utility library", "long_description": "OWSLib is a Python package for client programming with Open Geospatial Consortium (OGC) web service (hence OWS) interface standards, and their related content models. OWSLib provides a common API for accessing service metadata and wrappers for numerous OGC Web Service interfaces.", "active": true, "categories": ["net", "science", "python", "gis"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools"]}, {"type": "lib", "ports": ["py36-pyproj", "python36", "py36-tz", "py36-requests", "py36-dateutil"]}], "depends_on": [{"type": "lib", "ports": ["py36-cartopy"]}]}, {"name": "py37-owslib", "portdir": "python/py-owslib", "version": "0.19.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://geopython.github.io/OWSLib/", "description": "OGC Web Service utility library", "long_description": "OWSLib is a Python package for client programming with Open Geospatial Consortium (OGC) web service (hence OWS) interface standards, and their related content models. OWSLib provides a common API for accessing service metadata and wrappers for numerous OGC Web Service interfaces.", "active": true, "categories": ["net", "science", "python", "gis"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["py37-pyproj", "python37", "py37-tz", "py37-requests", "py37-dateutil"]}], "depends_on": [{"type": "lib", "ports": ["py37-cartopy"]}]}, {"name": "py38-owslib", "portdir": "python/py-owslib", "version": "0.19.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://geopython.github.io/OWSLib/", "description": "OGC Web Service utility library", "long_description": "OWSLib is a Python package for client programming with Open Geospatial Consortium (OGC) web service (hence OWS) interface standards, and their related content models. OWSLib provides a common API for accessing service metadata and wrappers for numerous OGC Web Service interfaces.", "active": true, "categories": ["net", "science", "python", "gis"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["py38-pyproj", "python38", "py38-tz", "py38-requests", "py38-dateutil"]}], "depends_on": [{"type": "lib", "ports": ["py38-cartopy"]}]}, {"name": "py39-owslib", "portdir": "python/py-owslib", "version": "0.19.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://geopython.github.io/OWSLib/", "description": "OGC Web Service utility library", "long_description": "OWSLib is a Python package for client programming with Open Geospatial Consortium (OGC) web service (hence OWS) interface standards, and their related content models. OWSLib provides a common API for accessing service metadata and wrappers for numerous OGC Web Service interfaces.", "active": true, "categories": ["net", "science", "python", "gis"], "maintainers": [{"name": "petr", "github": "petrrr", "ports_count": 384}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py39-setuptools"]}, {"type": "lib", "ports": ["py39-pyproj", "python39", "py39-tz", "py39-requests", "py39-dateutil"]}], "depends_on": [{"type": "lib", "ports": ["py39-cartopy", "py-owslib"]}, {"type": "run", "ports": ["qgis3"]}]}, {"name": "py-pacal", "portdir": "python/py-pacal", "version": "1.5.1", "license": "GPL-3+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://pacal.sourceforge.net/index.html", "description": "PaCAL - ProbAbilistic CALculator", "long_description": "What is PaCAL? PaCAL is a Python package which allows you to perform arithmetic on random variables just like you do with ordinary program variables. The variables can follow practically any distribution.", "active": true, "categories": ["python"], "maintainers": [{"name": "adfernandes", "github": "adfernandes", "ports_count": 28}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py27-pacal"]}], "depends_on": []}, {"name": "py27-pacal", "portdir": "python/py-pacal", "version": "1.5.1", "license": "GPL-3+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://pacal.sourceforge.net/index.html", "description": "PaCAL - ProbAbilistic CALculator", "long_description": "What is PaCAL? PaCAL is a Python package which allows you to perform arithmetic on random variables just like you do with ordinary program variables. The variables can follow practically any distribution.", "active": true, "categories": ["python"], "maintainers": [{"name": "adfernandes", "github": "adfernandes", "ports_count": 28}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py27-cython", "py27-matplotlib", "python27", "py27-scipy", "py27-sympy", "py27-numpy"]}], "depends_on": [{"type": "lib", "ports": ["py-pacal"]}]}, {"name": "py-paho-mqtt", "portdir": "python/py-paho-mqtt", "version": "1.5.1", "license": "unknown", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://eclipse.org/paho", "description": "MQTT version 3.1/3.1.1 client class", "long_description": "Eclipse Paho MQTT Python client library", "active": true, "categories": ["python"], "maintainers": [{"name": "mojca", "github": "mojca", "ports_count": 190}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py39-paho-mqtt"]}], "depends_on": []}, {"name": "py27-paho-mqtt", "portdir": "python/py-paho-mqtt", "version": "1.5.1", "license": "unknown", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://eclipse.org/paho", "description": "MQTT version 3.1/3.1.1 client class", "long_description": "Eclipse Paho MQTT Python client library", "active": true, "categories": ["python"], "maintainers": [{"name": "mojca", "github": "mojca", "ports_count": 190}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["python27"]}], "depends_on": []}, {"name": "py37-paho-mqtt", "portdir": "python/py-paho-mqtt", "version": "1.5.1", "license": "unknown", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://eclipse.org/paho", "description": "MQTT version 3.1/3.1.1 client class", "long_description": "Eclipse Paho MQTT Python client library", "active": true, "categories": ["python"], "maintainers": [{"name": "mojca", "github": "mojca", "ports_count": 190}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["python37"]}], "depends_on": []}, {"name": "py35-importlib-metadata", "portdir": "python/py-importlib-metadata", "version": "2.1.0", "license": "Apache-2", "platforms": "darwin", "epoch": 1, "replaced_by": null, "homepage": "https://importlib-metadata.readthedocs.io/", "description": "Library to access the metadata for a Python package.", "long_description": "Library to access the metadata for a Python package.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py35-setuptools_scm"]}, {"type": "lib", "ports": ["python35", "py35-zipp"]}], "depends_on": [{"type": "build", "ports": ["py35-catalogue"]}, {"type": "lib", "ports": ["py35-virtualenv", "py35-pluggy", "py35-pytest", "py35-helpdev", "py35-keyring", "py35-tox", "py35-pyqt-builder", "py35-sip", "py35-flake8", "py35-backports.entry-points-selectable", "py35-jsonschema", "py35-wxpython-4.0", "py35-path"]}, {"type": "run", "ports": ["py35-isort"]}]}, {"name": "py-pandasql", "portdir": "python/py-pandasql", "version": "0.7.3", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/yhat/pandasql/", "description": "sqldf for pandas", "long_description": "pandasql allows you to query pandas DataFrames using SQL syntax. It works similarly to sqldf in R.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py37-pandasql"]}], "depends_on": []}, {"name": "py27-pandasql", "portdir": "python/py-pandasql", "version": "0.7.3", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/yhat/pandasql/", "description": "sqldf for pandas", "long_description": "pandasql allows you to query pandas DataFrames using SQL syntax. It works similarly to sqldf in R.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["python27", "py27-pandas", "py27-sqlalchemy"]}], "depends_on": []}, {"name": "py35-pandasql", "portdir": "python/py-pandasql", "version": "0.7.3", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/yhat/pandasql/", "description": "sqldf for pandas", "long_description": "pandasql allows you to query pandas DataFrames using SQL syntax. It works similarly to sqldf in R.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py35-setuptools"]}, {"type": "lib", "ports": ["python35", "py35-pandas", "py35-sqlalchemy"]}], "depends_on": []}, {"name": "py36-pandasql", "portdir": "python/py-pandasql", "version": "0.7.3", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/yhat/pandasql/", "description": "sqldf for pandas", "long_description": "pandasql allows you to query pandas DataFrames using SQL syntax. It works similarly to sqldf in R.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools"]}, {"type": "lib", "ports": ["python36", "py36-pandas", "py36-sqlalchemy"]}], "depends_on": []}, {"name": "py37-pandasql", "portdir": "python/py-pandasql", "version": "0.7.3", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/yhat/pandasql/", "description": "sqldf for pandas", "long_description": "pandasql allows you to query pandas DataFrames using SQL syntax. It works similarly to sqldf in R.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["python37", "py37-pandas", "py37-sqlalchemy"]}], "depends_on": [{"type": "lib", "ports": ["py-pandasql"]}]}, {"name": "py-panedr", "portdir": "python/py-panedr", "version": "0.5.2", "license": "LGPL-2.1+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/jbarnoud/panedr", "description": "Panedr reads a Gromacs EDR file and returns its content as a pandas dataframe.", "long_description": "Panedr reads a Gromacs EDR file and returns its content as a pandas dataframe. The library exposes one function\u2014the edr_to_df function\u2014that gets the path to an EDR file and returns a pandas dataframe.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py38-panedr"]}], "depends_on": []}, {"name": "py37-panedr", "portdir": "python/py-panedr", "version": "0.5.2", "license": "LGPL-2.1+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/jbarnoud/panedr", "description": "Panedr reads a Gromacs EDR file and returns its content as a pandas dataframe.", "long_description": "Panedr reads a Gromacs EDR file and returns its content as a pandas dataframe. The library exposes one function\u2014the edr_to_df function\u2014that gets the path to an EDR file and returns a pandas dataframe.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["py37-pbr", "python37", "py37-pandas"]}, {"type": "test", "ports": ["py37-six", "py37-pytest"]}], "depends_on": []}, {"name": "py38-panedr", "portdir": "python/py-panedr", "version": "0.5.2", "license": "LGPL-2.1+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/jbarnoud/panedr", "description": "Panedr reads a Gromacs EDR file and returns its content as a pandas dataframe.", "long_description": "Panedr reads a Gromacs EDR file and returns its content as a pandas dataframe. The library exposes one function\u2014the edr_to_df function\u2014that gets the path to an EDR file and returns a pandas dataframe.", "active": true, "categories": ["science", "python"], "maintainers": [{"name": "giovanni.bussi", "github": "GiovanniBussi", "ports_count": 61}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["py38-pbr", "python38", "py38-pandas"]}, {"type": "test", "ports": ["py38-six", "py38-pytest"]}], "depends_on": [{"type": "lib", "ports": ["py-panedr"]}]}, {"name": "py-parakeet", "portdir": "python/py-parakeet", "version": "0.23.2", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://www.parakeetpython.com/", "description": "Runtime compiler for numerical Python.", "long_description": "Runtime compiler for numerical Python.", "active": true, "categories": ["devel", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py27-parakeet"]}], "depends_on": []}, {"name": "py27-parakeet", "portdir": "python/py-parakeet", "version": "0.23.2", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://www.parakeetpython.com/", "description": "Runtime compiler for numerical Python.", "long_description": "Runtime compiler for numerical Python.", "active": true, "categories": ["devel", "python"], "maintainers": [], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["python27", "py27-dsltools", "py27-numpy"]}], "depends_on": [{"type": "lib", "ports": ["py-parakeet"]}]}, {"name": "py38-partd", "portdir": "python/py-partd", "version": "1.2.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/mrocklin/partd/", "description": "Appendable key-value storage.", "long_description": "Appendable key-value storage.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["python38", "py38-locket", "py38-toolz"]}], "depends_on": [{"type": "lib", "ports": ["py38-dask"]}]}, {"name": "py35-paramiko", "portdir": "python/py-paramiko", "version": "2.7.2", "license": "LGPL-2.1+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/paramiko/paramiko/", "description": "Native Python SSHv2 protocol library", "long_description": "This is a library for making SSH2 connections (client or server). Emphasis is on using SSH2 as an alternative to SSL for making secure connections between python scripts. All major ciphers and hash methods are supported. SFTP client and server mode are both supported too.", "active": false, "categories": ["net", "security", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py35-setuptools"]}, {"type": "lib", "ports": ["python35", "py35-bcrypt", "py35-cryptography", "py35-pynacl"]}], "depends_on": [{"type": "lib", "ports": ["py35-ansible-base"]}]}, {"name": "py-paramiko", "portdir": "python/py-paramiko", "version": "2.8.0", "license": "LGPL-2.1+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/paramiko/paramiko/", "description": "Native Python SSHv2 protocol library", "long_description": "This is a library for making SSH2 connections (client or server). Emphasis is on using SSH2 as an alternative to SSL for making secure connections between python scripts. All major ciphers and hash methods are supported. SFTP client and server mode are both supported too.", "active": true, "categories": ["net", "security", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py39-paramiko"]}], "depends_on": []}, {"name": "py-parameterized", "portdir": "python/py-parameterized", "version": "0.8.1", "license": "FreeBSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/wolever/parameterized", "description": "Parameterized testing with any Python test framework", "long_description": "Parameterized testing with any Python test framework", "active": true, "categories": ["python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py39-parameterized"]}], "depends_on": []}, {"name": "py37-parameterized", "portdir": "python/py-parameterized", "version": "0.8.1", "license": "FreeBSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/wolever/parameterized", "description": "Parameterized testing with any Python test framework", "long_description": "Parameterized testing with any Python test framework", "active": true, "categories": ["python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["python37"]}, {"type": "test", "ports": ["py37-mock", "py37-nose"]}], "depends_on": [{"type": "test", "ports": ["py37-apache-beam", "py37-aws-sam-translator"]}]}, {"name": "py-pandocfilters", "portdir": "python/py-pandocfilters", "version": "1.4.3", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/jgm/pandocfilters", "description": "Utilities for writing pandoc filters in python.", "long_description": "Utilities for writing pandoc filters in python.", "active": true, "categories": ["textproc", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py39-pandocfilters"]}], "depends_on": []}, {"name": "py27-pandocfilters", "portdir": "python/py-pandocfilters", "version": "1.4.3", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/jgm/pandocfilters", "description": "Utilities for writing pandoc filters in python.", "long_description": "Utilities for writing pandoc filters in python.", "active": true, "categories": ["textproc", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["python27"]}], "depends_on": [{"type": "lib", "ports": ["py27-nbconvert"]}]}, {"name": "py35-pandocfilters", "portdir": "python/py-pandocfilters", "version": "1.4.3", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/jgm/pandocfilters", "description": "Utilities for writing pandoc filters in python.", "long_description": "Utilities for writing pandoc filters in python.", "active": true, "categories": ["textproc", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["python35"]}], "depends_on": [{"type": "lib", "ports": ["py35-nbconvert"]}]}, {"name": "py36-pandocfilters", "portdir": "python/py-pandocfilters", "version": "1.4.3", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/jgm/pandocfilters", "description": "Utilities for writing pandoc filters in python.", "long_description": "Utilities for writing pandoc filters in python.", "active": true, "categories": ["textproc", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["python36"]}], "depends_on": [{"type": "lib", "ports": ["py36-nbconvert"]}]}, {"name": "py38-parameterized", "portdir": "python/py-parameterized", "version": "0.8.1", "license": "FreeBSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/wolever/parameterized", "description": "Parameterized testing with any Python test framework", "long_description": "Parameterized testing with any Python test framework", "active": true, "categories": ["python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["python38"]}, {"type": "test", "ports": ["py38-mock", "py38-nose"]}], "depends_on": [{"type": "run", "ports": ["py38-transformers"]}, {"type": "test", "ports": ["py38-apache-beam", "py38-aws-sam-translator"]}]}, {"name": "py39-parameterized", "portdir": "python/py-parameterized", "version": "0.8.1", "license": "FreeBSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/wolever/parameterized", "description": "Parameterized testing with any Python test framework", "long_description": "Parameterized testing with any Python test framework", "active": true, "categories": ["python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py39-setuptools"]}, {"type": "lib", "ports": ["python39"]}, {"type": "test", "ports": ["py39-mock", "py39-nose"]}], "depends_on": [{"type": "lib", "ports": ["py-parameterized"]}, {"type": "run", "ports": ["py39-transformers"]}, {"type": "test", "ports": ["py39-apache-beam"]}]}, {"name": "py-parsel", "portdir": "python/py-parsel", "version": "1.6.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/scrapy/parsel/", "description": "Extract data from HTML and XML using XPath and CSS selectors", "long_description": "Extract data from HTML and XML using XPath and CSS selectors", "active": true, "categories": ["python"], "maintainers": [{"name": "khindenburg", "github": "kurthindenburg", "ports_count": 306}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py39-parsel"]}], "depends_on": []}, {"name": "py-parse-type", "portdir": "python/py-parse-type", "version": "0.5.6", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/jenisys/parse_type", "description": "parse_type extends the parse module (opposite of string.format())", "long_description": "parse_type extends the parse module (opposite of string.format()) with the following features: build type converters for common use cases (enum/mapping, choice); build a type converter with a cardinality constraint (0..1,0..*,1..*); from the type converter with cardinality=1.; compose a type converter from other type converters; an extended parser that supports the CardinalityField naming schema and creates missing type variants (0..1,0..*,1..*) from the primary type converter", "active": true, "categories": ["devel", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py39-parse-type"]}], "depends_on": []}, {"name": "py27-parse-type", "portdir": "python/py-parse-type", "version": "0.5.6", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/jenisys/parse_type", "description": "parse_type extends the parse module (opposite of string.format())", "long_description": "parse_type extends the parse module (opposite of string.format()) with the following features: build type converters for common use cases (enum/mapping, choice); build a type converter with a cardinality constraint (0..1,0..*,1..*); from the type converter with cardinality=1.; compose a type converter from other type converters; an extended parser that supports the CardinalityField naming schema and creates missing type variants (0..1,0..*,1..*) from the primary type converter", "active": true, "categories": ["devel", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["python27"]}, {"type": "run", "ports": ["py27-six", "py27-enum34", "py27-parse"]}, {"type": "test", "ports": ["py27-pytest"]}], "depends_on": [{"type": "run", "ports": ["py27-behave"]}]}, {"name": "py36-parse-type", "portdir": "python/py-parse-type", "version": "0.5.6", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/jenisys/parse_type", "description": "parse_type extends the parse module (opposite of string.format())", "long_description": "parse_type extends the parse module (opposite of string.format()) with the following features: build type converters for common use cases (enum/mapping, choice); build a type converter with a cardinality constraint (0..1,0..*,1..*); from the type converter with cardinality=1.; compose a type converter from other type converters; an extended parser that supports the CardinalityField naming schema and creates missing type variants (0..1,0..*,1..*) from the primary type converter", "active": true, "categories": ["devel", "python"], "maintainers": [], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools"]}, {"type": "lib", "ports": ["python36"]}, {"type": "run", "ports": ["py36-parse", "py36-six"]}, {"type": "test", "ports": ["py36-pytest"]}], "depends_on": [{"type": "run", "ports": ["py36-behave"]}]}, {"name": "py-parse", "portdir": "python/py-parse", "version": "1.17.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://pypi.python.org/pypi/parse/", "description": "parse() is the opposite of format()", "long_description": "Parse strings using a specification based on the Python format() syntax -- parse() is the opposite of format()", "active": true, "categories": ["python"], "maintainers": [{"name": "danchr", "github": "danchr", "ports_count": 103}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py39-parse"]}], "depends_on": []}, {"name": "py27-parse", "portdir": "python/py-parse", "version": "1.17.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://pypi.python.org/pypi/parse/", "description": "parse() is the opposite of format()", "long_description": "Parse strings using a specification based on the Python format() syntax -- parse() is the opposite of format()", "active": true, "categories": ["python"], "maintainers": [{"name": "danchr", "github": "danchr", "ports_count": 103}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["python27"]}], "depends_on": [{"type": "run", "ports": ["py27-behave", "py27-parse-type"]}]}, {"name": "py35-parse", "portdir": "python/py-parse", "version": "1.17.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://pypi.python.org/pypi/parse/", "description": "parse() is the opposite of format()", "long_description": "Parse strings using a specification based on the Python format() syntax -- parse() is the opposite of format()", "active": true, "categories": ["python"], "maintainers": [{"name": "danchr", "github": "danchr", "ports_count": 103}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py35-setuptools"]}, {"type": "lib", "ports": ["python35"]}], "depends_on": []}, {"name": "py36-parse", "portdir": "python/py-parse", "version": "1.17.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://pypi.python.org/pypi/parse/", "description": "parse() is the opposite of format()", "long_description": "Parse strings using a specification based on the Python format() syntax -- parse() is the opposite of format()", "active": true, "categories": ["python"], "maintainers": [{"name": "danchr", "github": "danchr", "ports_count": 103}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools"]}, {"type": "lib", "ports": ["python36"]}], "depends_on": [{"type": "run", "ports": ["py36-behave", "py36-parse-type"]}]}, {"name": "py37-parse", "portdir": "python/py-parse", "version": "1.17.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://pypi.python.org/pypi/parse/", "description": "parse() is the opposite of format()", "long_description": "Parse strings using a specification based on the Python format() syntax -- parse() is the opposite of format()", "active": true, "categories": ["python"], "maintainers": [{"name": "danchr", "github": "danchr", "ports_count": 103}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["python37"]}], "depends_on": [{"type": "run", "ports": ["py37-behave", "py37-parse-type"]}]}, {"name": "py38-parse", "portdir": "python/py-parse", "version": "1.17.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://pypi.python.org/pypi/parse/", "description": "parse() is the opposite of format()", "long_description": "Parse strings using a specification based on the Python format() syntax -- parse() is the opposite of format()", "active": true, "categories": ["python"], "maintainers": [{"name": "danchr", "github": "danchr", "ports_count": 103}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["python38"]}], "depends_on": [{"type": "run", "ports": ["py38-behave", "py38-parse-type"]}]}, {"name": "py39-parse", "portdir": "python/py-parse", "version": "1.17.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://pypi.python.org/pypi/parse/", "description": "parse() is the opposite of format()", "long_description": "Parse strings using a specification based on the Python format() syntax -- parse() is the opposite of format()", "active": true, "categories": ["python"], "maintainers": [{"name": "danchr", "github": "danchr", "ports_count": 103}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py39-setuptools"]}, {"type": "lib", "ports": ["python39"]}], "depends_on": [{"type": "lib", "ports": ["beets-mosaic", "py-parse"]}, {"type": "run", "ports": ["py39-behave", "py39-parse-type"]}]}]}