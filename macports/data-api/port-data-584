{"count": 29693, "next": "http://ports.macports.org/api/v1/ports/?format=json&page=585", "previous": "http://ports.macports.org/api/v1/ports/?format=json&page=583", "results": [{"name": "rb27-ronn-ng", "portdir": "ruby/rb-ronn-ng", "version": "0.9.1", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/apjanke/ronn-ng", "description": "An updated fork of ronn. Build man pages from Markdown.", "long_description": "Ronn-NG is a new, currently-maintained fork of the defunct original Ronn project. Ronn builds manuals. It converts simple, human readable textfiles to roff for terminal display, and also to HTML for the web.", "active": true, "categories": ["devel", "www", "ruby"], "maintainers": [{"name": "judaew", "github": "judaew", "ports_count": 257}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["ruby27", "rb27-kramdown", "rb27-mustache", "rb27-nokogiri"]}], "depends_on": [{"type": "build", "ports": ["espeak-ng"]}]}, {"name": "py36-spyder-kernels", "portdir": "python/py-spyder-kernels", "version": "2.1.3", "license": "MIT", "platforms": "darwin", "epoch": 1, "replaced_by": null, "homepage": "https://github.com/spyder-ide/spyder-kernels", "description": "Jupyter kernels for Spyder's console.", "long_description": "Jupyter kernels for Spyder's console.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "reneeotten", "github": "reneeotten", "ports_count": 693}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools"]}, {"type": "lib", "ports": ["py36-ipykernel", "py36-ipython", "python36", "py36-wurlitzer", "py36-zmq", "py36-jupyter_client", "py36-cloudpickle"]}], "depends_on": [{"type": "run", "ports": ["py36-spyder-devel", "py36-spyder"]}]}, {"name": "py38-mypy", "portdir": "python/py-mypy", "version": "0.910", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://www.mypy-lang.org", "description": "Optional static typing for Python", "long_description": "Add type annotations to your Python programs, and use mypy to type check them. Mypy is essentially a Python linter on steroids, and it can catch many programming errors by analyzing your program, without actually having to run it. Mypy has a powerful type system with features such as type inference, gradual typing, generics and union types.", "active": true, "categories": ["python"], "maintainers": [{"name": "toby", "github": "tobypeterson", "ports_count": 130}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["py38-setuptools", "clang-9.0"]}, {"type": "lib", "ports": ["py38-toml", "python38", "py38-typing_extensions", "py38-mypy_extensions"]}, {"type": "run", "ports": ["mypy_select"]}], "depends_on": [{"type": "lib", "ports": ["py38-scipy"]}, {"type": "run", "ports": ["py38-pytest-mypy"]}, {"type": "test", "ports": ["py38-allennlp", "py38-rsa", "py38-typer"]}]}, {"name": "py36-mypy_extensions", "portdir": "python/py-mypy_extensions", "version": "0.4.3", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python/mypy_extensions", "description": "Experimental type system extensions for programs checked with the mypy typechecker", "long_description": "The \u201cmypy_extensions\u201d module defines experimental extensions to the standard \u201ctyping\u201d module that are supported by the mypy typechecker.", "active": true, "categories": ["python"], "maintainers": [{"name": "toby", "github": "tobypeterson", "ports_count": 130}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools"]}, {"type": "lib", "ports": ["python36"]}], "depends_on": [{"type": "lib", "ports": ["py36-black"]}]}, {"name": "rizin", "portdir": "devel/rizin", "version": "0.3.0", "license": "LGPL-3", "platforms": "darwin", "epoch": 1, "replaced_by": null, "homepage": "https://rizin.re/", "description": "UNIX-like reverse engineering framework and command-line toolset", "long_description": "Rizin is a fork of the radare2 reverse engineering framework with a focus on usability, working features and code cleanliness.", "active": true, "categories": ["devel"], "maintainers": [{"name": "l2dy", "github": "l2dy", "ports_count": 69}, {"name": "herby.gillot", "github": "herbygillot", "ports_count": 445}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["meson", "ninja", "pkgconfig", "clang-9.0"]}, {"type": "fetch", "ports": ["git"]}, {"type": "lib", "ports": ["libzip", "lz4", "zlib", "capstone", "libuv", "openssl", "tree-sitter"]}], "depends_on": []}, {"name": "xraylib", "portdir": "science/xraylib", "version": "4.1.1", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/tschoonj/xraylib", "description": "A library for X-ray matter interaction cross sections", "long_description": "xraylib provides an API with over 50 functions designed to provide convenient access to databases with cross sections (photoelectric, Compton, Rayleigh, XRF etc.), line energies, edge energies, fluorescence yields, scattering factors, refractive indices, Compton profiles etc. Bindings exist for Perl, Python, Java, Fortran, IDL, Lua, Ruby, PHP and .NET.", "active": true, "categories": ["science"], "maintainers": [], "variants": ["g95", "gcc10", "gcc11", "gcc5", "gcc6", "gcc7", "gcc8", "gcc9", "gccdevel", "perl5_28", "perl5_30", "python27", "python37", "python38", "python39", "ruby24", "ruby25", "ruby26", "java", "lua", "universal"], "dependencies": [{"type": "build", "ports": ["py39-cython", "swig-perl", "swig-python", "clang-9.0", "autoconf", "automake", "libtool"]}, {"type": "lib", "ports": ["python39", "py39-numpy", "perl5.28"]}], "depends_on": [{"type": "lib", "ports": ["xrmc"]}]}, {"name": "py39-confuse", "portdir": "python/py-confuse", "version": "1.6.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://pypi.org/project/confuse/", "description": "painless YAML config files for Python", "long_description": "Confuse is a configuration library for Python that uses YAML. It takes care of defaults, overrides, type checking, command-line integration, human-readable errors, and standard OS-specific locations.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "kirill", "github": "catap", "ports_count": 191}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py39-setuptools"]}, {"type": "lib", "ports": ["python39", "py39-yaml"]}], "depends_on": [{"type": "lib", "ports": ["py-confuse", "beets", "beets-devel", "beets-follow", "beets-originquery"]}]}, {"name": "py-pathvalidate", "portdir": "python/py-pathvalidate", "version": "2.5.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/thombashi/pathvalidate", "description": "pathvalidate is a Python library to sanitize/validate a string such as filenames/file-paths/etc.", "long_description": "pathvalidate is a Python library to sanitize/validate a string such as filenames/file-paths/etc.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "kirill", "github": "catap", "ports_count": 191}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py39-pathvalidate"]}], "depends_on": []}, {"name": "terraform-0.15", "portdir": "sysutils/terraform", "version": "0.15.5", "license": "MPL-2", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://www.terraform.io/downloads.html", "description": "A tool for building, changing, and versioning infrastructure safely and efficiently.", "long_description": "Terraform is an infrastructure as code software by HashiCorp. It allows users to define a datacenter infrastructure in a high-level configuration language, from which it can create an execution plan to build the infrastructure in a service provider such as AWS.", "active": true, "categories": ["sysutils"], "maintainers": [{"name": "herby.gillot", "github": "herbygillot", "ports_count": 445}, {"name": "emcrisostomo", "github": "emcrisostomo", "ports_count": 112}, {"name": "", "github": "pedrohdz", "ports_count": 40}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "extract", "ports": ["unzip"]}, {"type": "run", "ports": ["terraform_select"]}], "depends_on": [{"type": "run", "ports": ["terragrunt-0.29"]}]}, {"name": "py39-pathvalidate", "portdir": "python/py-pathvalidate", "version": "2.5.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/thombashi/pathvalidate", "description": "pathvalidate is a Python library to sanitize/validate a string such as filenames/file-paths/etc.", "long_description": "pathvalidate is a Python library to sanitize/validate a string such as filenames/file-paths/etc.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "kirill", "github": "catap", "ports_count": 191}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py39-setuptools"]}, {"type": "lib", "ports": ["python39"]}], "depends_on": [{"type": "lib", "ports": ["py-pathvalidate"]}]}, {"name": "kustomize", "portdir": "devel/kustomize", "version": "4.4.1", "license": "Apache-2", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://kustomize.io", "description": "Customize raw, template-free YAML files for multiple purposes, like Kubernetes", "long_description": "kustomize lets you customize raw, template-free YAML files for multiple purposes, leaving the original YAML untouched and usable as is. kustomize targets kubernetes; it understands and can patch kubernetes style API objects. It's like make, in that what it does is declared in a file, and it's like sed, in that it emits edited text.", "active": true, "categories": ["devel"], "maintainers": [{"name": "nils", "github": "breun", "ports_count": 57}], "variants": [], "dependencies": [{"type": "build", "ports": ["go", "clang-9.0"]}], "depends_on": []}, {"name": "py27-py2app", "portdir": "python/py-py2app", "version": "0.26.1", "license": "(MIT or PSF)", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://py2app.readthedocs.io/", "description": "converts python scripts into executable Mac OS X apps", "long_description": "A distutils extension which converts python scripts into executable Mac OS X applications, able to run without requiring an existing python installation. This is a replacement for bundlebuilder.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "jmr", "github": "jmroot", "ports_count": 201}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["python27", "py27-macholib", "py27-setuptools"]}], "depends_on": []}, {"name": "py36-patsy", "portdir": "python/py-patsy", "version": "0.5.2", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pydata/patsy", "description": "Python package for describing statistical models.", "long_description": "A Python package for describing statistical models and for building design matrices. It is closely inspired by and compatible with the 'formula' mini-language used in R and S.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools"]}, {"type": "lib", "ports": ["python36", "py36-numpy", "py36-six"]}, {"type": "test", "ports": ["py36-pytest"]}], "depends_on": [{"type": "lib", "ports": ["py36-pymc3", "py36-statsmodels"]}]}, {"name": "genact", "portdir": "games/genact", "version": "0.11.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://svenstaro.github.io/genact", "description": "A nonsense activity generator", "long_description": "Pretend to be busy or waiting for your computer when you should actually be doing real work! Impress people with your insane multitasking skills. Just open a few instances of genact and watch the show. genact has multiple scenes that pretend to be doing something exciting or useful when in reality nothing is happening at all.", "active": true, "categories": ["games"], "maintainers": [{"name": "herby.gillot", "github": "herbygillot", "ports_count": 445}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["cargo", "clang-12"]}], "depends_on": []}, {"name": "py36-py2app", "portdir": "python/py-py2app", "version": "0.26.1", "license": "(MIT or PSF)", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://py2app.readthedocs.io/", "description": "converts python scripts into executable Mac OS X apps", "long_description": "A distutils extension which converts python scripts into executable Mac OS X applications, able to run without requiring an existing python installation. This is a replacement for bundlebuilder.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "jmr", "github": "jmroot", "ports_count": 201}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["python36", "py36-macholib", "py36-setuptools"]}], "depends_on": []}, {"name": "py37-patsy", "portdir": "python/py-patsy", "version": "0.5.2", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pydata/patsy", "description": "Python package for describing statistical models.", "long_description": "A Python package for describing statistical models and for building design matrices. It is closely inspired by and compatible with the 'formula' mini-language used in R and S.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["python37", "py37-numpy", "py37-six"]}, {"type": "test", "ports": ["py37-pytest"]}], "depends_on": [{"type": "lib", "ports": ["py37-pymc3", "py37-statsmodels"]}]}, {"name": "chaakoo", "portdir": "sysutils/chaakoo", "version": "0.0.1-beta", "license": "Apache-2.0", "platforms": "darwin freebsd linux", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pallavJha/chaakoo", "description": "Slice and dice your TMUX windows and panes", "long_description": "Slice and dice your TMUX windows and panes. chaakoo is a wrapper over TMUX that can create sessions, windows and panes from a grid based layout. The idea here is inspired by the CSS grid template areas.", "active": true, "categories": ["sysutils"], "maintainers": [{"name": "herby.gillot", "github": "herbygillot", "ports_count": 445}], "variants": [], "dependencies": [{"type": "build", "ports": ["go", "clang-9.0"]}], "depends_on": []}, {"name": "py37-meshio", "portdir": "python/py-meshio", "version": "5.0.2", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/nschloe/meshio", "description": "There are various mesh formats available for representing unstructured meshes.", "long_description": "There are various mesh formats available for representing unstructured meshes. meshio can read and write all of the following and smoothly converts between them: Abaqus, ANSYS msh, AVS-UCD, CGNS, DOLFIN XML, Exodus, FLAC3D, H5M, Kratos/MDPA, Medit, MED/Salome, Nastran (bulk data), Neuroglancer precomputed format, Gmsh (format versions 2.2, 4.0, and 4.1), OBJ, OFF, PERMAS, PLY, STL, Tecplot .dat, TetGen .node/.ele, SVG (2D only, output only), SU2, UGRID, VTK, VTU, WKT (TIN), XDMF.", "active": true, "categories": ["python"], "maintainers": [{"name": "mps", "github": "Schamschula", "ports_count": 394}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-pep517", "py37-python-install", "py37-setuptools", "py37-wheel"]}, {"type": "lib", "ports": ["python37"]}], "depends_on": [{"type": "lib", "ports": ["py37-pygmsh"]}]}, {"name": "py38-meshio", "portdir": "python/py-meshio", "version": "5.0.2", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/nschloe/meshio", "description": "There are various mesh formats available for representing unstructured meshes.", "long_description": "There are various mesh formats available for representing unstructured meshes. meshio can read and write all of the following and smoothly converts between them: Abaqus, ANSYS msh, AVS-UCD, CGNS, DOLFIN XML, Exodus, FLAC3D, H5M, Kratos/MDPA, Medit, MED/Salome, Nastran (bulk data), Neuroglancer precomputed format, Gmsh (format versions 2.2, 4.0, and 4.1), OBJ, OFF, PERMAS, PLY, STL, Tecplot .dat, TetGen .node/.ele, SVG (2D only, output only), SU2, UGRID, VTK, VTU, WKT (TIN), XDMF.", "active": true, "categories": ["python"], "maintainers": [{"name": "mps", "github": "Schamschula", "ports_count": 394}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-pep517", "py38-python-install", "py38-setuptools", "py38-wheel"]}, {"type": "lib", "ports": ["python38"]}], "depends_on": [{"type": "lib", "ports": ["py38-pygmsh"]}]}, {"name": "py39-meshio", "portdir": "python/py-meshio", "version": "5.0.2", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/nschloe/meshio", "description": "There are various mesh formats available for representing unstructured meshes.", "long_description": "There are various mesh formats available for representing unstructured meshes. meshio can read and write all of the following and smoothly converts between them: Abaqus, ANSYS msh, AVS-UCD, CGNS, DOLFIN XML, Exodus, FLAC3D, H5M, Kratos/MDPA, Medit, MED/Salome, Nastran (bulk data), Neuroglancer precomputed format, Gmsh (format versions 2.2, 4.0, and 4.1), OBJ, OFF, PERMAS, PLY, STL, Tecplot .dat, TetGen .node/.ele, SVG (2D only, output only), SU2, UGRID, VTK, VTU, WKT (TIN), XDMF.", "active": true, "categories": ["python"], "maintainers": [{"name": "mps", "github": "Schamschula", "ports_count": 394}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py39-pep517", "py39-python-install", "py39-setuptools", "py39-wheel"]}, {"type": "lib", "ports": ["python39"]}], "depends_on": [{"type": "lib", "ports": ["py-meshio", "py39-pygmsh"]}]}, {"name": "armadillo", "portdir": "science/armadillo", "version": "10.7.3", "license": "Apache-2", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://arma.sf.net/", "description": "Armadillo C++ linear algebra library", "long_description": "Armadillo is a C++ linear algebra library (matrix maths) aiming towards a good balance between speed and ease of use. Integer, floating point and complex numbers are supported, as well as a subset of trigonometric and statistics functions. Various matrix decompositions are provided through optional integration with LAPACK or high-performance LAPACK-compatible libraries.", "active": true, "categories": ["science"], "maintainers": [{"name": "mps", "github": "Schamschula", "ports_count": 394}], "variants": ["debug", "clang10", "clang11", "clang12", "clang13", "clang50", "clang60", "clang70", "clang80", "clang90", "clangdevel", "g95", "gcc10", "gcc11", "gcc5", "gcc6", "gcc7", "gcc8", "gcc9", "gccdevel", "gfortran", "mpich", "openmpi", "arpack", "openblas", "superlu", "universal"], "dependencies": [{"type": "build", "ports": ["cmake", "pkgconfig", "clang-9.0"]}, {"type": "extract", "ports": ["xz"]}, {"type": "lib", "ports": ["hdf5"]}], "depends_on": [{"type": "lib", "ports": ["gr-specest", "gr37-specest", "gr-baz", "gr37-baz", "gnss-sdr", "gnss-sdr-devel", "mlpack", "dolfin", "ensmallen", "gr-adapt", "gr37-adapt"]}]}, {"name": "py38-stack_data", "portdir": "python/py-stack_data", "version": "0.1.1", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://github.com/alexmojaki/stack_data", "description": "Library that extracts data from stack frames and tracebacks.", "long_description": "Library that extracts data from stack frames and tracebacks.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["py38-wheel", "clang-9.0", "py38-setuptools", "py38-setuptools_scm", "py38-toml"]}, {"type": "lib", "ports": ["py38-asttokens", "py38-executing", "py38-pure_eval", "python38"]}], "depends_on": []}, {"name": "py39-stack_data", "portdir": "python/py-stack_data", "version": "0.1.1", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://github.com/alexmojaki/stack_data", "description": "Library that extracts data from stack frames and tracebacks.", "long_description": "Library that extracts data from stack frames and tracebacks.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["py39-wheel", "clang-9.0", "py39-setuptools", "py39-setuptools_scm", "py39-toml"]}, {"type": "lib", "ports": ["py39-asttokens", "py39-executing", "py39-pure_eval", "python39"]}], "depends_on": [{"type": "lib", "ports": ["py-stack_data"]}]}, {"name": "xrootd", "portdir": "science/xrootd", "version": "5.3.2", "license": "LGPL-3+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "http://xrootd.org/", "description": "Generic suite for fast, low-latency and scalable data access.", "long_description": "Generic suite for fast, low-latency and scalable data access.", "active": true, "categories": ["science"], "maintainers": [{"name": "jonesc", "github": "cjones051073", "ports_count": 175}], "variants": ["debug", "python38", "python39", "python310", "readline", "ssl", "kerberos", "universal"], "dependencies": [{"type": "build", "ports": ["cctools", "cmake", "pkgconfig", "clang-9.0"]}, {"type": "lib", "ports": ["curl", "kerberos5", "json-c", "zlib", "tinyxml", "openssl11", "python310", "libxml2", "ossp-uuid", "readline", "swig"]}], "depends_on": [{"type": "lib", "ports": ["py36-scikit-hep-uproot4", "py37-scikit-hep-uproot4", "py38-scikit-hep-uproot4", "py39-scikit-hep-uproot4", "py310-scikit-hep-uproot4", "root6"]}]}, {"name": "py310-mypy_extensions", "portdir": "python/py-mypy_extensions", "version": "0.4.3", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python/mypy_extensions", "description": "Experimental type system extensions for programs checked with the mypy typechecker", "long_description": "The \u201cmypy_extensions\u201d module defines experimental extensions to the standard \u201ctyping\u201d module that are supported by the mypy typechecker.", "active": true, "categories": ["python"], "maintainers": [{"name": "toby", "github": "tobypeterson", "ports_count": 130}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py310-setuptools"]}, {"type": "lib", "ports": ["python310"]}], "depends_on": [{"type": "lib", "ports": ["py310-black", "py310-mypy"]}]}, {"name": "py39-Faker", "portdir": "python/py-Faker", "version": "9.8.1", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/joke2k/faker", "description": "Faker is a Python package that generates fake data for you.", "long_description": "Faker is a Python package that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you.", "active": true, "categories": ["python"], "maintainers": [{"name": "judaew", "github": "judaew", "ports_count": 257}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py39-setuptools"]}, {"type": "lib", "ports": ["python39"]}, {"type": "run", "ports": ["py39-Pillow", "py39-dateutil", "py39-text-unidecode"]}, {"type": "test", "ports": ["py39-ukpostcodeparser", "py39-decorator", "py39-freezegun", "py39-pytest", "py39-random2", "py39-validators"]}], "depends_on": [{"type": "lib", "ports": ["py-Faker"]}, {"type": "test", "ports": ["py39-tensorflow-addons"]}]}, {"name": "py38-patsy", "portdir": "python/py-patsy", "version": "0.5.2", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pydata/patsy", "description": "Python package for describing statistical models.", "long_description": "A Python package for describing statistical models and for building design matrices. It is closely inspired by and compatible with the 'formula' mini-language used in R and S.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["python38", "py38-numpy", "py38-six"]}, {"type": "test", "ports": ["py38-pytest"]}], "depends_on": [{"type": "lib", "ports": ["py38-pymc3", "py38-statsmodels"]}]}, {"name": "py27-toml", "portdir": "python/py-toml", "version": "0.10.2", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/uiri/toml", "description": "Python Library for Tom's Obvious, Minimal Language", "long_description": "A Python library for parsing and creating TOML. The module passes the TOML test suite.", "active": true, "categories": ["python"], "maintainers": [{"name": "toby", "github": "tobypeterson", "ports_count": 130}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["python27"]}], "depends_on": [{"type": "build", "ports": ["py27-xmlsec", "py27-singledispatch", "py27-backports-functools_lru_cache", "py27-platformdirs", "py27-backports.entry-points-selectable", "py27-jaraco.functools", "py27-importlib-resources", "py27-tqdm", "py27-pytest-cov"]}, {"type": "lib", "ports": ["py27-pipfile", "py27-tempora", "py27-autopep8", "py27-tox"]}]}, {"name": "py310-Pillow", "portdir": "python/py-Pillow", "version": "8.4.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python-imaging/Pillow", "description": "Python Imaging Library (fork)", "long_description": "Python Imaging Library (fork)", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["x11", "universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py310-setuptools"]}, {"type": "lib", "ports": ["libjpeg-turbo", "openjpeg", "tiff", "webp", "zlib", "python310", "py310-tkinter", "py310-olefile", "freetype", "lcms2"]}], "depends_on": [{"type": "lib", "ports": ["py310-cairosvg", "py310-matplotlib", "py310-opengl"]}, {"type": "run", "ports": ["py310-Faker"]}]}, {"name": "py36-typing_extensions", "portdir": "python/py-typing_extensions", "version": "3.10.0.2", "license": "PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python/typing/blob/master/typing_extensions/README.rst", "description": "Backported and Experimental Type Hints for Python", "long_description": "The typing module was added to the standard library in Python 3.5 on a provisional basis and will no longer be provisional in Python 3.7. However, this means users of Python 3.5 - 3.6 who are unable to upgrade will not be able to take advantage of new types added to the typing module, such as typing.Text or typing.Coroutine. The typing_extensions module contains both backports of these changes as well as experimental types that will eventually be added to the typing module, such as Protocol or TypedDict.", "active": true, "categories": ["python"], "maintainers": [{"name": "toby", "github": "tobypeterson", "ports_count": 130}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools", "py-bootstrap-modules"]}, {"type": "lib", "ports": ["python36"]}], "depends_on": [{"type": "lib", "ports": ["py36-aiohttp", "py36-aioitertools", "py36-bokeh", "py36-markdown-it-py", "py36-pymc3", "py36-slackclient", "py36-anyio", "py36-twisted", "py36-async-timeout", "py36-black", "py36-astroid", "py36-importlib-metadata"]}, {"type": "run", "ports": ["py36-arrow", "py36-rich"]}]}, {"name": "py38-zipp", "portdir": "python/py-zipp", "version": "3.6.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/jaraco/zipp", "description": "A pathlib-compatible Zipfile object wrapper.", "long_description": "A pathlib-compatible Zipfile object wrapper.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools", "py38-setuptools_scm", "py-bootstrap-modules"]}, {"type": "lib", "ports": ["python38"]}], "depends_on": [{"type": "lib", "ports": ["py38-importlib-metadata", "py38-importlib-resources"]}]}, {"name": "py310-typed-ast", "portdir": "python/py-typed-ast", "version": "1.4.3", "license": "Apache-2", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python/typed_ast", "description": "A fork of Python 2 and 3 ast modules with type comment support.", "long_description": "A fork of Python 2 and 3 ast modules with type comment support.", "active": false, "categories": ["devel", "python"], "maintainers": [{"name": "reneeotten", "github": "reneeotten", "ports_count": 693}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py310-setuptools"]}, {"type": "lib", "ports": ["python310"]}, {"type": "test", "ports": [null]}], "depends_on": []}, {"name": "py310-toml", "portdir": "python/py-toml", "version": "0.10.2", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/uiri/toml", "description": "Python Library for Tom's Obvious, Minimal Language", "long_description": "A Python library for parsing and creating TOML. The module passes the TOML test suite.", "active": true, "categories": ["python"], "maintainers": [{"name": "toby", "github": "tobypeterson", "ports_count": 130}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py310-setuptools"]}, {"type": "lib", "ports": ["python310"]}], "depends_on": [{"type": "build", "ports": ["py310-jaraco.functools", "py310-scikit-hep-hepunits", "py310-tqdm", "py310-enrich", "py310-pytest-cov"]}, {"type": "lib", "ports": ["py310-sip", "py310-eric-ide", "py310-tempora", "py310-mypy", "py310-setuptools-rust", "py310-pytest", "py310-autopep8", "py310-pylint", "py310-tox"]}]}, {"name": "mpich-clang11", "portdir": "science/mpich", "version": "3.4.2", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://www.mpich.org/", "description": "Message Passing Interface (MPI) Library", "long_description": "MPICH is a high-performance and widely portable implementation of the Message Passing Interface (MPI) standard (MPI-1, MPI-2 and MPI-3). The goals of MPICH are: (1) to provide an MPI implementation that efficiently supports different computation and communication platforms including commodity clusters (desktop systems, shared-memory systems, multicore architectures), high-speed networks (10 Gigabit Ethernet, InfiniBand, Myrinet, Quadrics) and proprietary high-end computing systems (Blue Gene, Cray) and (2) to enable cutting-edge research in MPI through an easy-to-extend modular framework for other derived implementations. \n\nTHIS SUBPORT WRAPS clang11's C/C++ (AND THE FORTRAN COMPILER SELECTED BY THE VARIANT, IF ANY)", "active": true, "categories": ["net", "science", "parallel"], "maintainers": [{"name": "eborisch", "github": "eborisch", "ports_count": 165}, {"name": "mascguy", "github": "mascguy", "ports_count": 129}], "variants": ["g95", "gcc10", "gcc11", "gcc5", "gcc6", "gcc7", "gcc8", "gcc9", "gccdevel", "threads", "gforker", "tuned", "native", "universal"], "dependencies": [{"type": "build", "ports": ["gcc11", "clang-11", "pkgconfig"]}, {"type": "lib", "ports": ["libxml2", "gcc11", "hwloc", "libgcc", "clang-11"]}, {"type": "run", "ports": ["mpi_select", "mpi-doc"]}], "depends_on": []}, {"name": "py27-greenlet", "portdir": "python/py-greenlet", "version": "1.1.2", "license": "MIT and PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python-greenlet/greenlet", "description": "Lightweight in-process concurrent programming", "long_description": "The \"greenlet\" package is a spin-off of Stackless, a version of CPython that supports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently (typically in a single or a few OS-level threads) and are synchronized with data exchanges on \"channels\". A \"greenlet\", on the other hand, is a still more primitive notion of micro-thread with no implicit scheduling; coroutines, in other words. This is useful when you want to control exactly when your code runs. You can build custom scheduled micro-threads on top of greenlet; however, it seems that greenlets are useful on their own as a way to make advanced control flow structures. For example, we can recreate generators; the difference with Python's own generators is that our generators can call nested functions and the nested functions can yield values too. Additionally, you don't need a \"yield\" keyword. See the example in test_generator.py. Greenlets are provided as a C extension module for the regular unmodified interpreter.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["python27"]}], "depends_on": [{"type": "lib", "ports": ["py27-eventlet", "py27-bpython", "py27-gevent", "py27-gevent-websocket", "py27-scoop", "py27-neovim"]}, {"type": "test", "ports": ["py27-structlog"]}]}, {"name": "py35-greenlet", "portdir": "python/py-greenlet", "version": "1.1.2", "license": "MIT and PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python-greenlet/greenlet", "description": "Lightweight in-process concurrent programming", "long_description": "The \"greenlet\" package is a spin-off of Stackless, a version of CPython that supports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently (typically in a single or a few OS-level threads) and are synchronized with data exchanges on \"channels\". A \"greenlet\", on the other hand, is a still more primitive notion of micro-thread with no implicit scheduling; coroutines, in other words. This is useful when you want to control exactly when your code runs. You can build custom scheduled micro-threads on top of greenlet; however, it seems that greenlets are useful on their own as a way to make advanced control flow structures. For example, we can recreate generators; the difference with Python's own generators is that our generators can call nested functions and the nested functions can yield values too. Additionally, you don't need a \"yield\" keyword. See the example in test_generator.py. Greenlets are provided as a C extension module for the regular unmodified interpreter.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py35-setuptools"]}, {"type": "lib", "ports": ["python35"]}], "depends_on": [{"type": "lib", "ports": ["py35-gevent", "py35-bpython", "py35-gevent-websocket", "py35-scoop"]}]}, {"name": "py27-patsy", "portdir": "python/py-patsy", "version": "0.5.2", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pydata/patsy", "description": "Python package for describing statistical models.", "long_description": "A Python package for describing statistical models and for building design matrices. It is closely inspired by and compatible with the 'formula' mini-language used in R and S.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py27-setuptools"]}, {"type": "lib", "ports": ["python27", "py27-numpy", "py27-six"]}, {"type": "test", "ports": ["py27-pytest"]}], "depends_on": [{"type": "lib", "ports": ["py27-seaborn", "py27-statsmodels"]}]}, {"name": "py39-ipython", "portdir": "python/py-ipython", "version": "7.28.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://ipython.org/", "description": "An enhanced interactive Python shell.", "long_description": "An enhanced interactive Python shell.", "active": true, "categories": ["devel", "science", "python"], "maintainers": [{"name": "aronnax", "github": "lpsinger", "ports_count": 371}, {"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}, {"type": "lib", "ports": ["py39-appnope", "py39-backcall", "py39-decorator", "py39-jedi", "py39-pexpect", "py39-pickleshare", "python39", "py39-pygments", "py39-setuptools", "py39-traitlets", "py39-matplotlib-inline", "py39-prompt_toolkit"]}, {"type": "run", "ports": ["ipython_select", "ipython3_select"]}], "depends_on": [{"type": "lib", "ports": ["py39-ipykernel", "py-ipython", "py39-ipywidgets", "py39-jupyter_console", "py39-jupyterlab", "py39-spyder-kernels", "py39-ipdb", "py39-jupyter_sphinx", "py39-ipyparallel"]}, {"type": "run", "ports": ["py39-photomosaic", "py39-note-seq", "py39-spyder-devel", "py39-spyder"]}]}, {"name": "py35-jsonschema", "portdir": "python/py-jsonschema", "version": "3.2.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/Julian/jsonschema", "description": "An implementation of JSON Schema validation for Python.", "long_description": "An implementation of JSON Schema validation for Python.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py35-setuptools_scm"]}, {"type": "lib", "ports": ["py35-importlib-metadata", "py35-pyrsistent", "python35", "py35-six", "py35-setuptools", "py35-attrs"]}], "depends_on": [{"type": "lib", "ports": ["py35-cubes", "py35-datacite", "py35-jupyterlab_launcher", "py35-nbformat"]}]}, {"name": "py36-jsonschema", "portdir": "python/py-jsonschema", "version": "3.2.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/Julian/jsonschema", "description": "An implementation of JSON Schema validation for Python.", "long_description": "An implementation of JSON Schema validation for Python.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py36-setuptools_scm"]}, {"type": "lib", "ports": ["py36-importlib-metadata", "py36-pyrsistent", "python36", "py36-six", "py36-setuptools", "py36-attrs"]}], "depends_on": [{"type": "lib", "ports": ["py36-nbformat", "py36-cubes", "py36-datacite", "py36-spaCy", "py36-altair", "py36-jupyterlab_server"]}, {"type": "run", "ports": ["py36-spyder", "py36-spyder-devel"]}]}, {"name": "py35-patsy", "portdir": "python/py-patsy", "version": "0.5.2", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pydata/patsy", "description": "Python package for describing statistical models.", "long_description": "A Python package for describing statistical models and for building design matrices. It is closely inspired by and compatible with the 'formula' mini-language used in R and S.", "active": true, "categories": ["math", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py35-setuptools"]}, {"type": "lib", "ports": ["python35", "py35-numpy", "py35-six"]}, {"type": "test", "ports": ["py35-pytest"]}], "depends_on": [{"type": "lib", "ports": ["py35-seaborn", "py35-statsmodels"]}]}, {"name": "py37-greenlet", "portdir": "python/py-greenlet", "version": "1.1.2", "license": "MIT and PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python-greenlet/greenlet", "description": "Lightweight in-process concurrent programming", "long_description": "The \"greenlet\" package is a spin-off of Stackless, a version of CPython that supports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently (typically in a single or a few OS-level threads) and are synchronized with data exchanges on \"channels\". A \"greenlet\", on the other hand, is a still more primitive notion of micro-thread with no implicit scheduling; coroutines, in other words. This is useful when you want to control exactly when your code runs. You can build custom scheduled micro-threads on top of greenlet; however, it seems that greenlets are useful on their own as a way to make advanced control flow structures. For example, we can recreate generators; the difference with Python's own generators is that our generators can call nested functions and the nested functions can yield values too. Additionally, you don't need a \"yield\" keyword. See the example in test_generator.py. Greenlets are provided as a C extension module for the regular unmodified interpreter.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools"]}, {"type": "lib", "ports": ["python37"]}], "depends_on": [{"type": "lib", "ports": ["py37-eventlet", "py37-bpython", "py37-gevent", "py37-sqlalchemy", "py37-neovim"]}, {"type": "test", "ports": ["py37-structlog"]}]}, {"name": "py37-jsonschema", "portdir": "python/py-jsonschema", "version": "4.1.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/Julian/jsonschema", "description": "An implementation of JSON Schema validation for Python.", "long_description": "An implementation of JSON Schema validation for Python.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py37-setuptools_scm"]}, {"type": "lib", "ports": ["py37-importlib-metadata", "python37", "py37-setuptools", "py37-pyrsistent", "py37-attrs"]}], "depends_on": [{"type": "lib", "ports": ["py37-nbformat", "py37-datacite", "py37-jupyterlab_server", "py37-spaCy", "py37-altair", "py37-beancount-import"]}, {"type": "run", "ports": ["py37-aws-sam-translator", "py37-spyder-devel", "py37-cfn-lint", "py37-spyder"]}]}, {"name": "py38-greenlet", "portdir": "python/py-greenlet", "version": "1.1.2", "license": "MIT and PSF", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/python-greenlet/greenlet", "description": "Lightweight in-process concurrent programming", "long_description": "The \"greenlet\" package is a spin-off of Stackless, a version of CPython that supports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently (typically in a single or a few OS-level threads) and are synchronized with data exchanges on \"channels\". A \"greenlet\", on the other hand, is a still more primitive notion of micro-thread with no implicit scheduling; coroutines, in other words. This is useful when you want to control exactly when your code runs. You can build custom scheduled micro-threads on top of greenlet; however, it seems that greenlets are useful on their own as a way to make advanced control flow structures. For example, we can recreate generators; the difference with Python's own generators is that our generators can call nested functions and the nested functions can yield values too. Additionally, you don't need a \"yield\" keyword. See the example in test_generator.py. Greenlets are provided as a C extension module for the regular unmodified interpreter.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools"]}, {"type": "lib", "ports": ["python38"]}], "depends_on": [{"type": "lib", "ports": ["py38-eventlet", "py38-bpython", "py38-gevent", "py38-sqlalchemy", "py38-neovim"]}, {"type": "test", "ports": ["py38-structlog"]}]}, {"name": "py38-jsonschema", "portdir": "python/py-jsonschema", "version": "4.1.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/Julian/jsonschema", "description": "An implementation of JSON Schema validation for Python.", "long_description": "An implementation of JSON Schema validation for Python.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py38-setuptools_scm"]}, {"type": "lib", "ports": ["python38", "py38-attrs", "py38-pyrsistent", "py38-setuptools"]}], "depends_on": [{"type": "lib", "ports": ["py38-nbformat", "py38-datacite", "py38-jupyterlab_server", "py38-spaCy", "py38-altair", "py38-beancount-import"]}, {"type": "run", "ports": ["py38-aws-sam-translator", "py38-spyder-devel", "py38-cfn-lint", "py38-spyder"]}]}, {"name": "py39-jsonschema", "portdir": "python/py-jsonschema", "version": "4.1.0", "license": "MIT", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/Julian/jsonschema", "description": "An implementation of JSON Schema validation for Python.", "long_description": "An implementation of JSON Schema validation for Python.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": [], "dependencies": [{"type": "build", "ports": ["clang-9.0", "py39-setuptools_scm"]}, {"type": "lib", "ports": ["python39", "py39-attrs", "py39-pyrsistent", "py39-setuptools"]}], "depends_on": [{"type": "lib", "ports": ["py39-nbformat", "py-jsonschema", "docker-compose", "py39-jupyterlab_server", "py39-spaCy", "py39-altair"]}, {"type": "run", "ports": ["py39-spyder-devel", "py39-spyder"]}]}, {"name": "stellarium", "portdir": "science/stellarium", "version": "0.21.2", "license": "GPL-2+", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://stellarium.org/", "description": "Stellarium is a free open source planetarium for your computer.", "long_description": "Stellarium is a free open source planetarium for your computer. It shows a realistic sky in 3D, just like what you see with the naked eye, binoculars or a telescope. It is being used in planetarium projectors. Just set your coordinates and go.", "active": true, "categories": ["science"], "maintainers": [{"name": "michaelld", "github": "michaelld", "ports_count": 382}], "variants": ["debug", "RemoteControl", "python27", "python35", "python36", "python37", "python38", "python39"], "dependencies": [{"type": "build", "ports": ["cmake", "pkgconfig", "clang-9.0"]}, {"type": "lib", "ports": ["qt5-qtmultimedia", "qt5-qtscript", "qt5-qttools", "zlib", "gettext", "qt5-qtbase", "fontconfig", "python39", "gpsd", "freetype", "doxygen", "glib2", "qt5-qtserialport", "qt5-qtlocation"]}], "depends_on": []}, {"name": "mandoc", "portdir": "textproc/mandoc", "version": "1.14.6", "license": "ISC", "platforms": "openbsd freebsd netbsd darwin", "epoch": 0, "replaced_by": null, "homepage": "https://mandoc.bsd.lv/", "description": "UNIX manpage compiler", "long_description": "mandoc is a suite of tools compiling mdoc, the roff macro language of choice for BSD manual pages, and man, the predominant historical language for UNIX manuals.", "active": true, "categories": ["textproc"], "maintainers": [{"name": "grimreaper", "github": "grimreaper", "ports_count": 12}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0"]}], "depends_on": [{"type": "build", "ports": ["libfido2"]}]}, {"name": "libstrophe", "portdir": "net/libstrophe", "version": "0.10.1", "license": "(GPL-3 or MIT)", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://strophe.im/libstrophe/", "description": "A simple, lightweight C library for writing XMPP clients", "long_description": "libstrophe is a lightweight XMPP client library written in C. It has minimal dependencies and is configurable for various environments. It runs well on both Linux, Unix, and Windows based platforms.", "active": true, "categories": ["net"], "maintainers": [], "variants": ["libxml", "universal"], "dependencies": [{"type": "build", "ports": ["clang-9.0", "m4", "pkgconfig", "autoconf", "automake", "libtool"]}, {"type": "lib", "ports": ["expat", "openssl"]}], "depends_on": [{"type": "lib", "ports": ["profanity"]}]}, {"name": "py38-cryptography", "portdir": "python/py-cryptography", "version": "35.0.0", "license": "BSD", "platforms": "darwin", "epoch": 0, "replaced_by": null, "homepage": "https://github.com/pyca/cryptography", "description": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers.", "long_description": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers.", "active": true, "categories": ["devel", "python"], "maintainers": [{"name": "stromnov", "github": "stromnov", "ports_count": 1875}], "variants": ["universal"], "dependencies": [{"type": "build", "ports": ["clang-13", "cargo", "pkgconfig", "py38-setuptools", "py38-setuptools-rust"]}, {"type": "lib", "ports": ["python38", "py38-cffi", "openssl11"]}, {"type": "test", "ports": ["py38-cryptography_vectors", "py38-pytest-subtests", "py38-hypothesis", "py38-iso8601", "py38-pretend", "py38-pytest", "py38-pytest-cov", "py38-pytest-xdist", "py38-tz"]}], "depends_on": [{"type": "lib", "ports": ["py38-service_identity", "py38-oauthlib", "salt-syndic", "salt-api", "py38-ansible-core", "py38-scrapy", "py38-fido2", "py38-paramiko", "py38-twilio", "py38-openssl", "py38-dnspython", "py38-fabric", "py38-mitmproxy", "py38-acme", "salt", "salt-minion", "salt-master"]}, {"type": "run", "ports": ["py38-trustme", "py38-dns-lexicon", "py38-autobahn", "py38-axolotl", "py38-openstacksdk"]}, {"type": "test", "ports": ["py38-libcloud"]}]}]}